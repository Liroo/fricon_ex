defmodule Fricon.Schema.RefreshToken do
  @moduledoc """
  Refresh Token schema

  The refresh token schema is used for the authentication system. 

  ## Fields

  Here's an overview of the fields.

  | field              | description                                                     | validation             |
  |--------------------|-----------------------------------------------------------------|------------------------|
  | user               | User to who belongs the refresh token                           | none                   |
  | revoked            | Tell if the refresh token has been revoked                      | boolean                |
  | rovoked_at         | Tell when the refresh token has been revoked                    | DateTime               |
  | token              | The token generated by Phoenix.Token                            | String                 |

  ## Changeset

  Here's available changeset and their utility

  - `changeset`: Used when you create a refresh token.

  """

  use Ecto.Schema
  import Ecto.Changeset

  alias Fricon.Schema.User

  @type t :: %__MODULE__{
    user: User.t | %Ecto.Association.NotLoaded{},
    revoked: boolean,
    revoked_at: DateTime.t,
    token: String.t,
    expires_at: DateTime.t,
    inserted_at: DateTime.t,
    updated_at: DateTime.t,
    id: integer
  }

  schema "refresh_tokens" do
    belongs_to :user, User

    field :revoked, :boolean, default: false
    field :revoked_at, :utc_datetime

    field :token, :string
    field :expires_at, :utc_datetime

    timestamps()
  end

  @doc false
  def changeset(%__MODULE__{} = refresh_token, attrs \\ %{}) do
    refresh_token
    |> cast(attrs, [:token, :expires_at])
    |> validate_required([:token, :expires_at])
    |> unique_constraint(:token)
  end
end
